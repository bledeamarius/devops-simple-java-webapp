properties([
  parameters([
    [
      $class: 'ChoiceParameter',
      choiceType: 'PT_SINGLE_SELECT',
      name: 'ENVIRONMENT',
      script: [
        $class: 'GroovyScript',
        fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get Env\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return["Dev","UAT"]'
                ]
      ]
    ],
    [
      $class: 'CascadeChoiceParameter',
      choiceType: 'PT_SINGLE_SELECT',
      name: 'VERSION_SUFFIX',
      referencedParameters: 'ENVIRONMENT',
      script: [
        $class: 'GroovyScript',
        fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get Environment from ENVIRONMENT Param\']'
        ],
        script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        ''' 
                        if (ENVIRONMENT == "Dev") { 
                            return ["-SNAPSHOT"] 
                        } 
                        else if (ENVIRONMENT == "UAT") { 
                            return [""] 
                        }
                        '''
                ]
      ]
   ]
 ])
])

pipeline {
    agent any
    tools { 
      maven 'maven-instance' 
    }
    // parameters {
    //     string(name: "PROJECT_REPO_NAME", defaultValue:"simple-java-webapp")
    // }
    environment {
        DOCKER_REGISTRY   = 'maryusmm'
        IMAGE_NAME        = 'simple-npm-webapp'
        PROJECT_REPO_NAME = 'simple-java-webapp'
    }

    stages {
        stage('Clone project repo') {
            steps {
                sh 'git clone https://github.com/bledeamarius/"${PROJECT_REPO_NAME}"'
                sh 'mv /"{PROJECT_REPO_NAME}" .. '
                sh 'ls'
            }
        }
        stage('Replace version suffix') { 
            steps {
                echo "~~~ Replacing version suffix with ${params.VERSION_SUFFIX} ~~~ "
                sh 'sed -i "s/VERSION_SUFFIX/"${params.VERSION_SUFFIX}"/g" pom.xml' 
            }
        }

        stage('Execute maven goals - clean, deploy') {            
            steps{
                sh "mvn clean deploy"
            }
        }
        stage('Deploy artefact to Artifactory') {
           
            steps {
                script {
                    def server = Artifactory.server 'artifactory-instance'
                    rtUpload (
                        serverId: 'artifactory-instance',
                        spec: '''{
                            "files": [
                                {
                                "pattern": "**/*.war",
                                "target": "maven-repo-local/"
                                }
                            ]
                        }''',
                    )          
                }
            }
        }

    }
    post {
        always {
            cleanWs()
        }
    }
}
