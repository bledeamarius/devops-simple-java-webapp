properties([
 copyArtifactPermission('*')
  parameters([
    [
      $class: 'ChoiceParameter',
      choiceType: 'PT_SINGLE_SELECT',
      name: 'ENVIRONMENT',
      script: [
        $class: 'GroovyScript',
        fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get Env\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return["Dev","UAT"]'
                ]
      ]
    ],
    [
      $class: 'CascadeChoiceParameter',
      choiceType: 'PT_SINGLE_SELECT',
      name: 'VERSION_SUFFIX',
      referencedParameters: 'ENVIRONMENT',
      script: [
        $class: 'GroovyScript',
        fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get Environment from ENVIRONMENT Param\']'
        ],
        script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        ''' 
                        if (ENVIRONMENT == "Dev") { 
                            return ["-SNAPSHOT"] 
                        } 
                        else if (ENVIRONMENT == "UAT") { 
                            return [""] 
                        }
                        '''
                ]
      ]
   ]
 ])
])

pipeline {
    agent {
        label 'Jenkins-agent-1'
    }
    tools { 
      maven 'maven-instance' 
    }

    environment {
        PROJECT_REPO_NAME = 'simple-java-webapp'
    }

    stages {
        stage('Clone project repo') {
            steps {
                sh 'git clone https://github.com/bledeamarius/"${PROJECT_REPO_NAME}"'
                sh 'mv "${PROJECT_REPO_NAME}"/* . '
            }
        }
        stage('Replace version suffix') { 
            steps {
                echo "~~~ Replacing version suffix with ${params.VERSION_SUFFIX} ~~~ "
                sh "sed -i s/VERSION_SUFFIX/${params.VERSION_SUFFIX}/g pom.xml"
            }
        }

        stage('Execute maven goals - clean, deploy') {            
            steps{
                withMaven(maven: 'maven-instance', mavenSettingsConfig: 'f38447f7-d13a-4014-b5e5-6f4c7c7f5b89') {
                    sh "mvn clean deploy"
                }
                
            }
        }

        stage('Archive locally') {
            steps {
                
                archiveArtifacts artifacts: 'target/*.war', followSymlinks: false, onlyIfSuccessful: true
            }
        }
        // stage('Deploy artefact to Artifactory') {
           
        //     steps {
        //         script {
        //             def server = Artifactory.server 'artifactory-instance'
        //             rtUpload (
        //                 serverId: 'artifactory-instance',
        //                 spec: '''{
        //                     "files": [
        //                         {
        //                         "pattern": "**/*.war",
        //                         "target": "maven-repo-local/"
        //                         }
        //                     ]
        //                 }''',
        //             )          
        //         }
        //     }
        // }

    }
    post {
        always {
            cleanWs()
        }
 
    }
}
