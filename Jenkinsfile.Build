// properties([
//   parameters([
//     [
//       $class: 'ChoiceParameter',
//       choiceType: 'PT_SINGLE_SELECT',
//       name: 'ENVIRONMENT',
//       script: [
//         $class: 'GroovyScript',
//         fallbackScript: [
//                     classpath: [], 
//                     sandbox: false, 
//                     script: 
//                         'return[\'Could not get Env\']'
//                 ], 
//                 script: [
//                     classpath: [], 
//                     sandbox: false, 
//                     script: 
//                         'return["Dev","UAT"]'
//                 ]
//       ]
//     ],
//     [
//       $class: 'CascadeChoiceParameter',
//       choiceType: 'PT_SINGLE_SELECT',
//       name: 'VERSION_SUFFIX',
//       referencedParameters: 'ENVIRONMENT',
//       script: [
//         $class: 'GroovyScript',
//         fallbackScript: [
//                     classpath: [], 
//                     sandbox: false, 
//                     script: 
//                         'return[\'Could not get Environment from ENVIRONMENT Param\']'
//         ],
//         script: [
//                     classpath: [], 
//                     sandbox: false, 
//                     script: 
//                         ''' if (ENVIRONMENT.equals("Dev")){
//                                 return["-SNAPSHOT"]
//                             }
//                             else if(ENVIRONMENT.equals("UAT")){
//                                 return[""]
//                             }
//                         '''
//                 ]
//       ]
//    ]
//  ])
// ])
properties([
    parameters([
        [$class: 'ChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select the Env Name from the Dropdown List', 
            filterLength: 1, 
            filterable: true, 
            name: 'Env', 
            randomName: 'choice-parameter-5631314439613978', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get Env\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return["Dev","QA","Stage","Prod"]'
                ]
            ]
        ], 
        [$class: 'CascadeChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select the Server from the Dropdown List', 
            filterLength: 1, 
            filterable: true, 
            name: 'Server', 
            randomName: 'choice-parameter-5631314456178619', 
            referencedParameters: 'Env', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get Environment from Env Param\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        ''' if (Env.equals("Dev")){
                                return["devaaa001","devaaa002","devbbb001","devbbb002","devccc001","devccc002"]
                            }
                            else if(Env.equals("QA")){
                                return["qaaaa001","qabbb002","qaccc003"]
                            }
                            else if(Env.equals("Stage")){
                                return["staaa001","stbbb002","stccc003"]
                            }
                            else if(Env.equals("Prod")){
                                return["praaa001","prbbb002","prccc003"]
                            }
                        '''
                ]
            ]
        ]
    ])
])
pipeline {
    agent any
    tools { 
      maven 'maven-instance' 
    }
    // parameters {
    //     string(name: "VERSION_SUFFIX", defaultValue:"-SNAPSHOT")
    // }
    environment {
        DOCKER_REGISTRY = 'maryusmm'
        IMAGE_NAME      = 'simple-npm-webapp'
    }

    stages {
        stage('Replace version suffix') { 
            steps {
                echo "~~~ Replacing version suffix with ${params.VERSION_SUFFIX} ~~~ "
                sh 'sed -i "s/VERSION_SUFFIX/"${params.VERSION_SUFFIX}"/g" pom.xml' 
            }
        }

        stage('Execute maven goals - clean, deploy') {            
            steps{
                sh "mvn clean deploy"
            }
        }
        stage('Deploy artefact to Artifactory') {
           
            steps {
                script {
                    def server = Artifactory.server 'artifactory-instance'
                    rtUpload (
                        serverId: 'artifactory-instance',
                        spec: '''{
                            "files": [
                                {
                                "pattern": "**/*.war",
                                "target": "maven-repo-local/"
                                }
                            ]
                        }''',
                    )          
                }
            }
        }


    }
}
